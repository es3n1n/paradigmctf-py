name: Test

on:
  pull_request:
  push:
    branches: [ master ]

jobs:
  test:
    name: ${{ matrix.backend }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.13' ]
        backend: [ 'docker', 'k8s' ]
    env:
      UV_CACHE_DIR: ~/.cache/uv
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Write config file (k8s)
      if: matrix.backend == 'k8s'
      run: |
        cat <<EOF > kind-config.yaml
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          extraPortMappings:
          - containerPort: 31337
            hostPort: 31337
            protocol: TCP
          - containerPort: 8545
            hostPort: 8545
            protocol: TCP
        EOF

    - name: Create kind cluster (k8s)
      if: matrix.backend == 'k8s'
      uses: helm/kind-action@v1
      with:
        cluster_name: ctf
        config: kind-config.yaml

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Up (docker)
      run: docker compose -f compose.yml up -d --build
      if: matrix.backend == 'docker'

    - name: Build images (k8s)
      if: matrix.backend == 'k8s'
      run: |
        docker compose -f compose.yml build
        docker images --format '{{.Repository}}:{{.Tag}}' \
          | grep -E 'paradigmctf-chal-|es3n1n' \
          | xargs -I{} kind load docker-image {} --name ctf

    - name: Up (k8s)
      run: kubectl apply -f k8s.yml -f examples/k8s.yml
      if: matrix.backend == 'k8s'

    - name: Wait for stuff to be Ready (k8s)
      if: matrix.backend == 'k8s'
      run: kubectl wait --for=condition=available --timeout=120s deployment --all

    - name: Run tests
      run: uv run pytest
      if: ${{ !cancelled() && !failure() }}

    - name: Show logs (docker)
      if: (failure() || cancelled()) && matrix.backend == 'docker'
      run: docker compose -f compose.yml logs --no-color -n 500

    - name: Show logs (k8s)
      if: (failure() || cancelled()) && matrix.backend == 'k8s'
      run: |
        kubectl logs -l app=ctf-server --tail=500 || true
        kubectl logs -l app=anvil-proxy --tail=500 || true
        kubectl logs -l app=challenge-hello --tail=500 || true

    - name: Show pod status (k8s)
      if: (failure() || cancelled()) && matrix.backend == 'k8s'
      run: |
        kubectl get pods -o wide || true
        kubectl describe pod -l app=challenge-hello || true
        kubectl describe pod -l app=ctf-server || true
        kubectl describe pod -l app=anvil-proxy || true

    - name: Down (docker)
      if: always() && matrix.backend == 'docker'
      run: docker compose -f compose.yml down --volumes --remove-orphans || true

    - name: Down (k8s)
      if: always() && matrix.backend == 'k8s'
      run: kubectl delete -f k8s.yml -f examples/k8s.yml || true

    - name: Prune uv cache
      run: uv cache prune
