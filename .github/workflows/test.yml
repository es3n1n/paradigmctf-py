name: Test

on:
  pull_request:
  push:
    branches: [ master ]

jobs:
  test:
    name: ${{ matrix.backend }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.13' ]
        backend: [ 'docker', 'k8s' ]
    env:
      UV_CACHE_DIR: ~/.cache/uv
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Create kind cluster (k8s)
      if: matrix.backend == 'k8s'
      uses: helm/kind-action@v1
      with:
        cluster_name: ctf

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set up uv
      uses: astral-sh/setup-uv@v6
      with:
        version: "latest"

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-${{ matrix.python-version }}-

    - name: Install dependencies
      run: uv sync --all-extras --dev

    - name: Up (docker)
      run: docker compose -f compose.yml up -d --build
      if: matrix.backend == 'docker'

    - name: Up (k8s)
      run: kubectl apply -f k8s.yml -f examples/k8s.yml
      if: matrix.backend == 'k8s'

    - name: Forward anvil-proxy (k8s)
      if: matrix.backend == 'k8s'
      run: |
        setsid kubectl port-forward svc/anvil-proxy 8545:8545 --address 127.0.0.1 \
              > /tmp/port-forward.log 2>&1 &
        echo $! > /tmp/pf.pid

    - name: Run tests
      run: uv run pytest
      if: ${{ !cancelled() && !failure() }}

    - name: Show logs (docker)
      if: failure() && matrix.backend == 'docker'
      run: docker compose -f compose.yml logs --no-color -n 500

    - name: Show logs (k8s)
      if: failure() && matrix.backend == 'k8s'
      run: kubectl logs -l app=ctf-server --tail=500

    - name: Down (docker)
      if: always() && matrix.backend == 'docker'
      run: docker compose -f compose.yml down --volumes --remove-orphans || true

    - name: Stop port-forward (k8s)
      if: always() && matrix.backend == 'k8s'
      run: kill "$(cat /tmp/pf.pid)" || true

    - name: Down (k8s)
      if: always() && matrix.backend == 'k8s'
      run: kubectl delete -f k8s.yml -f examples/k8s.yml || true

    - name: Prune uv cache
      run: uv cache prune
